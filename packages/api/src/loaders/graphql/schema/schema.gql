# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResponse {
  token: String
  user: User
}

type BaseEntity {
  _id: ID!
  createdAt: Float!
}

type Conversation {
  _id: ID!
  createdAt: Float!
  lastMessage: MessageResponse!
  messages(pagination: PaginationInput = {limit: 1, skip: 0}): [MessageResponse!]!
  participants: [User!]!
  updatedAt: Float!
}

input LoginInput {
  email: String!
  password: String!
}

type Message {
  _id: ID!
  conversationId: ID!
  createdAt: Float!
  message: String!
  seen: Boolean!
  sender: User!
}

type MessageResponse {
  _id: ID!
  conversationId: ID!
  createdAt: Float!
  isSender: Boolean!
  message: String!
  seen: Boolean!
  sender: User!
}

type Mutation {
  authFacebook(token: String!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  markConversationSeen(conversationId: String!): Conversation!
  register(input: RegisterInput!): AuthResponse!
  sendMessage(input: SendMessageInput!): MessageResponse!
  testSubscriptions(userId: String!): Boolean!
}

"""Mongo object id scalar type"""
scalar ObjectId

input PaginationInput {
  limit: Int = 10
  skip: Int = 0
}

type Query {
  conversations(pagination: PaginationInput!, search: String): [Conversation!]!
  getMessagesByConv(conversationId: String!): Conversation!
  me: User!
  searchContacts(search: String): [SearchContactsResponse!]!
  user(userId: ObjectId!): User
}

input RegisterInput {
  avatarUrl: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type SearchContactsResponse {
  _id: ID!
  avatarUrl: String!
  conversationId: String
  createdAt: Float!
  email: String!
  firstName: String!
  fullName: String!
  isOnline: Boolean!
  lastName: String!
  lastSeen: Float!
}

input SendMessageInput {
  conversationId: String
  message: String!
  receiverId: String
}

type Subscription {
  conversationUpdated: Conversation!
  newMessage(conversationId: ID): MessageResponse!
  notifications: String!
}

type User {
  _id: ID!
  avatarUrl: String!
  createdAt: Float!
  email: String!
  firstName: String!
  fullName: String!
  isOnline: Boolean!
  lastName: String!
  lastSeen: Float!
}
